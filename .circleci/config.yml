# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2
jobs:
  build:
    docker:
      # add `-node` for yarn
      - image: circleci/python:3.6-node
        environment:
          PIPENV_VENV_IN_PROJECT: true
          DATABASE_URL: postgresql://root@localhost/circle_test?sslmode=disable

      # for migrate test
      - image: circleci/postgres:9.6.2
        environment:
          POSTGRES_USER: root
          POSTGRES_DB: circle_test

    working_directory: ~/sdorica-inspector

    steps:
      - checkout
      - run: sudo chown -R circleci:circleci /usr/local/bin
      - run: sudo chown -R circleci:circleci /usr/local/lib/python3.6/site-packages
      # Download and cache dependencies
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "Pipfile.lock" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-

      - restore_cache:
          name: Restore Yarn Package Cache
          keys:
            - yarn-packages-{{ checksum "yarn.lock" }}
            - yarn-packages-

      - run:
          name: install dependencies
          command: |
            sudo pip install pipenv
            pipenv install
            yarn install --frozen-lockfile

      - save_cache:
          paths:
            - "./venv"
            - "/usr/local/bin"
            - "/usr/local/lib/python3.6/site-packages"
          key: v1-dependencies-{{ checksum "Pipfile.lock" }}

      - save_cache:
          name: Save Yarn Package Cache
          key: yarn-packages-{{ checksum "yarn.lock" }}
          paths:
            - ~/.cache/yarn

      # run tests!
      - run:
          name: run tests
          command: |
            pipenv run python manage.py migrate
            pipenv run coverage run manage.py test
            pipenv run codecov --token=$CODECOV_TOKEN

      - store_artifacts:
          path: test-reports
          destination: test-reports
  deploy:
    machine:
      enabled: true
    steps:
      - run:
          name: Deploy Over SSH
          # need to add deploy key , `git clone` and set before
          command: |
            ssh -p $SSH_PORT $SSH_USER@$SSH_HOST "cd ~/sdorica-inspector && git pull && chmod +x ./*.sh && ./deploy.sh && ./run.sh"

workflows:
  version: 2
  build-and-deploy:
    jobs:
      - build
      - deploy:
          requires:
            - build
          filters:
            branches:
              only: master